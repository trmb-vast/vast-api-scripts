#!/bin/bash
#
#  get-vast-ioflows:   a script to scrape the VAST rest API and save io flow data to graphite
#
# 

#  Author:  rob@vastdata.com
#  Thu 14 Oct 2021 10:35:35 PM UTC rmallory .. initial public release.
#  Fri Sep  6 12:34:55 PDT 2019  rmallory .. adapted from metrics scraper.
#  Wed 11 Aug 2021 02:53:48 AM UTC rmallory .. fit to new api format
#  Sun 15 Aug 2021 11:34:02 PM UTC rmallory .. refactored for multi-cnodes
#  Mon 30 Aug 2021 07:32:17 PM UTC rmallory .. removed python dependency.. fixed DONTSEND flag
#
# Notes: newer versions at:  https://github.com/trmb-vast/api-tools
#
# dependencies: jshon   http://kmkeen.com/jshon/  (use my build_jshon script)
#               netcat "yum install netcat"
#               curl   "yum install curl"
#               graphite server somewhere  (or use -the -D flag)
#               python - for pretty printing -processing json .. no longer needed
# Examples
# https://192.168.10.209/api/capacity/?path=/scratch1/robtest/dwayne-therock-johnson.older&type=usable
#curl 'https://192.168.10.209/api/iodata/?graph=true&results_num=100&sort_by=bw&sort_type=total&limit=20' -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0' -H 'Accept: application/json, text/plain, */*' -H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'Content-Type: application/json' -H 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjMyNTA1NjE1LCJqdGkiOiI3MGQxMmRjYmVlYmM0YmNjOWNmZWQ1NzM4ODYyYWNkNSIsInVzZXJfaWQiOjJ9.WABDMIYrEal7FwwzLp37431fyjaiXcqgEculqxod_LY' -H 'Connection: keep-alive' -H 'Referer: https://192.168.10.209/' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: same-origin' -H 'TE: trailers'

installdir=$(
	cd $(dirname $0)
	pwd
)
PATH=/bin:/usr/bin:/usr/sbin:$installdir
HOST=$(uname -n)

NC="$(which nc) -w1" #some versions of netcat work better with -w1 arg.
#NC="$(which nc) -w0" #some versions of netcat work quicker with -w0 arg.

####### Fill out your variables here, or better yet, use commandline args
VMS=10.61.10.201 #IP of Vast management server
VMSUSER=admin
VMSPASS=xxx # change this or better yet use the -p flag below

# symlink to this script with the cluster name as last _field
# and it will auto-set the cluster... alternative to -c <cluster>
CLUSTER=$(echo $0 | awk -F_ '{print $NF}')
CLUSTER=${CLUSTER:-VastOne}

### if you don't want to use the -g <graphitehost> flag, then set here
GRAPHITE_HOST=10.61.201.12 #IP of Graphite host
GRAPHITE_PORT=2003         #Graphite listener port

usage() {
	echo "Usage: $0 -p <credentialfile> -g <graphite host> -c <cluster> -v <vms name/ip>  "
	echo "     a script to retreive JSON metrics from the VAST API and push to Graphite"
	echo " the required -r <report>  is the VAST metric ID. ..multiple -r <report> are fine."
	echo "-p <credentialfile> is a file with user:pass  of vms user to run queries as. chmod go-rwx it as needed"
	echo "use the -D flag to prevent sending to the -g Graphite host. or dont pass -g "
}

DONTSEND=false
DEBUG=false

while getopts p:c:g:v:r:dDh c; do
	case "$c" in
	p) CREDS_FILE="${OPTARG}" ;;
	g) GRAPHITE_HOST="${OPTARG}" ;;
	c) CLUSTER="${OPTARG}" ;;
	v) VMS="${OPTARG}" ;;
	d) DEBUG=true ;;
	D) DONTSEND=true ;;
	h | \?)
		usage
		exit 1
		;;
	esac
done
shift $((${OPTIND} - 1))

echo CLUSTER: $CLUSTER

### reading credentials from a file (readable by this user, or with SUDO)
### is more safe than embedding passwords in scripts, or passing as args
if [ -f $CREDS_FILE ]; then
	VMSUSER=$(cat $CREDS_FILE | cut -d: -f1)
	VMSPASS=$(cat $CREDS_FILE | cut -d: -f2)
fi

if [ "x" = "x${GRAPHITE_HOST}" ]; then
	DONTSEND=true
fi

####
# Each curl/report goes to a different named file in /tmp
JSON=/tmp/vmsdata_ioflows_${CLUSTER}_$(echo $1 | tr ' ' '_').json
rm -f $JSON
$DEBUG && echo JSON=$JSON
####

## Actually, these days we set NOW from the timestamp in the json file
[[ $(uname -s) = "Linux" ]] && NOW=$(date +%s)

scrape_and_send_report() {

	$DEBUG && set -x

	echo "...Calling VAST API for report $1 with curl"
        curl -u ${VMSUSER}:${VMSPASS} -H "accept: application/json" --insecure -X GET "https://$VMS/api/iodata/?graph=true&results_num=100&sort_by=bw&sort_type=total&limit=20&protocol_filter=NFS3"  | python3 -m json.tool >$JSON
#       curl -u admin:#### -H 'accept: application/json' --insecure -X GET 'https://192.168.10.209/api/iodata/?graph=true&results_num=100&sort_by=bw&sort_type=total&limit=20&protocol_filter=NFS3' 
#curl 'https://192.168.10.209/api/iodata/?graph=true&results_num=100&sort_by=bw&sort_type=total&limit=20&protocol_filter=NFS3' -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0' -H 'Accept: application/json, text/plain, */*' -H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'Content-Type: application/json' -H 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjMyNTIxNDY2LCJqdGkiOiI5YzZhYmEzNDA1MzE0NWJlODQ4NzRiZWE1MTNmNDY2NCIsInVzZXJfaWQiOjJ9.qP1i286ALhlZr1DZVVU6kewLalohbeeMcEEipnDidDA' -H 'Connection: keep-alive' -H 'Referer: https://192.168.10.209/' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: same-origin' -H 'TE: trailers'

#	NUMELEMENTS="$($installdir/jshon -e $TOP_ARRAY -l <$JSON)"
#	NUMELEMENTS="$($installdir/jshon -e nodes_data -l <$JSON)"
TOP_ARRAY=connections
TOP_ARRAY=nodes_data
	NUMELEMENTS="$($installdir/jshon -e $TOP_ARRAY -l <$JSON)"
	echo NUMELEMENTS=$NUMELEMENTS

	#### This pulls out the preperty list..
	#KEYS_NUM=$($installdir/jshon -e keys -l <$JSON | tr '\n' ' ')
	KEYS_NUM=$($installdir/jshon -e $TOP_ARRAY -l <$JSON | tr '\n' ' ')
	#[
	# "usable",
	#"unique",
	#"logical"
	#]   # Note.. this is pretty cool.. we can derive the DRR  from logical / unique
	# The below just gets the keys names.. as seen above. we call them ELE_NAME
	#for i in $(seq 1 $KEYS_NUM); do
	for i in $($installdir/jshon -e $TOP_ARRAY -k <$JSON | tr '\n' ' ')
		ELE_NAME[$i]=$($installdir/jshon -e $TOP_ARRAY -e $i <$JSON | sed 's/"//g' | awk -F= '{print $NF}' | tr ',' '.')
		echo "Hmm.. would send $i with value ELE_NAME[$i]"
	done

	# Also, There are a couple more interesting ones.. root_data (entire cluster)  and small_folders (unknown yet)
	# we will check those out later.

	#[vastdata@vast-ait-1-cn12-opsmon vast-api-scripts]$ jshon -e $TOP_ARRAY -e 0  -e 1 -k < $JSON
	#data
	#parent
	#percent
	#average_atime

	# step1)  get the timestamp of this json sample  .. we use this throughout.. we could use average_atime also.
	TIMESTAMP=$($installdir/jshon -e time <$JSON)
	TIMESTAMP=$(echo $TIMESTAMP | sed 's/"//g')
	NOW=$(/usr/bin/date -d "$TIMESTAMP" +%s)

	# step2) for each of the samples
	for x in $(seq 1 $NUMELEMENTS); do
	$DEBUG && echo INFO: x is now $x

		DIR=$($installdir/jshon -e $TOP_ARRAY -e $x -e 0 <$JSON | sed 's/"//g' | tr ',' '.')
		PARENT=$($installdir/jshon -e $TOP_ARRAY -e $x -e 1 -e parent <$JSON | sed 's/"//g' | tr ',' '.')
		USEABLE=$($installdir/jshon -e $TOP_ARRAY -e $x -e 1 -e data -e 0 <$JSON | sed 's/"//g' | tr ',' '.')
		UNIQUE=$($installdir/jshon -e $TOP_ARRAY -e $x -e 1 -e data -e 1 <$JSON | sed 's/"//g' | tr ',' '.')
		LOGICAL=$($installdir/jshon -e $TOP_ARRAY -e $x -e 1 -e data -e 2 <$JSON | sed 's/"//g' | tr ',' '.')
# Hmm..  I think we have a bug.. or Im mis-interpriting the meaning .. I had to flip-flop these
                DRR=$(echo "$USEABLE / $UNIQUE" | bc -l) 
#                DRR=$(echo "$UNIQUE / $LOGICAL" | bc -l) 
    if [ $PARENT = "/" ] ; then PARENT=/root ; fi

		#echo vast.${CLUSTER}.capacity${PARENT}${DIR}.useable $USEABLE $NOW
		#$DONTSEND || echo vast.${CLUSTER}.capacity${PARENT}${DIR}.useable $USEABLE $NOW | $NC $GRAPHITE_HOST ${GRAPHITE_PORT}
		#echo vast.${CLUSTER}.capacity${PARENT}${DIR}.unique $UNIQUE $NOW
		#$DONTSEND || echo vast.${CLUSTER}.capacity${PARENT}${DIR}.unique $UNIQUE $NOW | $NC $GRAPHITE_HOST ${GRAPHITE_PORT}
		#echo vast.${CLUSTER}.capacity${PARENT}${DIR}.logical $LOGICAL $NOW
		#$DONTSEND || echo vast.${CLUSTER}.capacity${PARENT}${DIR}.logical $LOGICAL $NOW | $NC $GRAPHITE_HOST ${GRAPHITE_PORT}
		#echo vast.${CLUSTER}.capacity${PARENT}${DIR}.drr $DRR $NOW
		#$DONTSEND || echo vast.${CLUSTER}.capacity${PARENT}${DIR}.drr $DRR $NOW | $NC $GRAPHITE_HOST ${GRAPHITE_PORT}
		echo vast.${CLUSTER}.ioflow${DIR}.useable $USEABLE $NOW
		$DONTSEND || echo vast.${CLUSTER}.ioflow ${DIR}.useable $USEABLE $NOW | $NC $GRAPHITE_HOST ${GRAPHITE_PORT}
		echo vast.${CLUSTER}.ioflow${DIR}.unique $UNIQUE $NOW
		$DONTSEND || echo vast.${CLUSTER}.ioflow ${DIR}.unique $UNIQUE $NOW | $NC $GRAPHITE_HOST ${GRAPHITE_PORT}
		echo vast.${CLUSTER}.ioflow${DIR}.logical $LOGICAL $NOW
		$DONTSEND || echo vast.${CLUSTER}.ioflow${DIR}.logical $LOGICAL $NOW | $NC $GRAPHITE_HOST ${GRAPHITE_PORT}
		echo vast.${CLUSTER}.ioflow${DIR}.drr $DRR $NOW
		$DONTSEND || echo vast.${CLUSTER}.ioflow${DIR}.drr $DRR $NOW | $NC $GRAPHITE_HOST ${GRAPHITE_PORT}
	done
}

scrape_and_send_report
#for i in $REPORTS; do
#	scrape_and_send_report $i
#done
